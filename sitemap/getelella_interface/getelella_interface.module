<?php

module_load_include('inc', 'getelella_interface', 'includes/affichage_des_evenements');

function getelella_interface_mail_get_nbr_de_reponse_directes($nid){
  $query = new EntityFieldQuery();
  return $nombre_de_reponse = $query->entityCondition('entity_type', 'node')
  ->entityCondition('bundle', 'email')
  ->fieldCondition('field_mail_en_reponse_de', 'target_id', $nid, '=')
  ->count()
  ->execute();
}

function getelella_interface_preprocess_node(&$vars) {
  if ($vars['node']->type == 'email' && $vars['view_mode'] == 'full') {
    $vars['theme_hook_suggestions'][] = 'node__email_full';
  }
  if($vars['node']->type == 'event' && $vars['view_mode'] == 'popup_content') {
    $vars['theme_hook_suggestions'][] = 'node__event_popup_content';
  }
}

function getelella_interface_og_permission() {
  return array(
    'read email in inbox' => array(
      'title' => t('lire les courriels de la boite'),
      'description' => t("lit les courriels de la boite."),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(OG_AUTHENTICATED_ROLE),
    ),
    'delete email in inbox' => array(
      'title' => t('supprimer les courriels de la boite'),
      'description' => t("supprime les courriels de la boite."),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(OG_AUTHENTICATED_ROLE),
    ),
    'reply or create email of inbox' => array(
      'title' => t('Répondre ou créer des courriels poour boite'),
      'description' => t("Répondre ou créer des courriels poour boite"),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(OG_AUTHENTICATED_ROLE),
    ),
    'access the group dashboard' => array(
      'title' => t('Accéder au dasboard dyu groupe'),
      'description' => t("Accéder au dasboard du groupe"),
      'roles' => array(OG_AUTHENTICATED_ROLE),
      'default role' => array(OG_AUTHENTICATED_ROLE),
    ),
  );
}

/*
 * 'access callback' => 'sitemap_access',
    'access arguments' => array('Rendre le groupe transversal', "node", 1),

    'read email in inbox'
    'delete email in inbox'
    'reply or create email of inbox'
 */


function getelella_interface_menu() {
  $items = array();
  $items['dashboard/%'] = array(
    'title' => 'AJAX Example',
    'page callback' => 'getelella_interface_page',
    'page arguments' => array(1),
    'access callback' => 'sitemap_access',
    'access arguments' => array('access the group dashboard', "node", 1),
    'expanded' => TRUE,
    'theme callback' => 'getelella_interface_gentelella_callback',
    'file' => 'getelella_page_principale.inc',
  );

  $items['dashboard/%/inbox/%'] = array(
    'title' => 'Email inbox',
    'page callback' => 'getelella_interface_inbox',
    'page arguments' => array(1, 3),
    'access callback' => 'sitemap_access',
    'access arguments' => array('read email in inbox', "node", 1),
    'expanded' => TRUE,
    'theme callback' => 'getelella_interface_gentelella_callback',
    'file' => 'getelella_inbox.inc',
  );

  $items['testpp'] = array(
    'title' => 'Page test pp',
    'page callback' => 'page_test_pp',
    'page arguments' => array(1, 3),
    'access callback' => true,
    'expanded' => TRUE,
  );

  $items['dashboard/%/inbox/%/newmessage'] = array(
    'title' => 'Créer message',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getelella_interface_new_message', 1, 3),
    'theme callback' => 'getelella_interface_gentelella_callback',
    'access callback' => 'sitemap_access',
    'access arguments' => array('reply or create email of inbox', "node", 1),
    'expanded' => TRUE,
    'file' => 'getelella_inbox_new_message.inc',
  );

  $items['dashboard/inbox/newmessage/reply/%'] = array(
    'title' => 'Form Tutorial',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getelella_interface_new_message', null, null, 4),
    'theme callback' => 'getelella_interface_gentelella_callback',
    'access callback' => true,
    //@todo remake it work! 'access callback' => 'sitemap_access',
    //'access arguments' => array('reply or create email of inbox', "node", 1),
    'description' => 'Permet de répondre à un mail',
    'file' => 'getelella_inbox_new_message.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['dashboard/inbox/messageindex/%/provenance/%/siGet/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'getelella_interface_messageindex',
    'page arguments' => array(3, 5, true, 7),
    'access callback' => TRUE,
    'delivery callback' => 'getelella_interface_callback',
  );

  $items['dashboard/%/new/forum'] = array(
    'title' => 'Créer forum',
    'page callback' => 'getelella_interface_new_forum',
    'theme callback' => 'getelella_interface_gentelella_callback',
    'page arguments' => array(1),
    'access callback' => 'sitemap_access',
    'access arguments' => array('create forum content', "node", 1),
  );


  $items['dashboard/%/forum/%'] = array(
    'title' => 'Créer forum',
    'page callback' => 'getelella_interface_view_forum',
    'theme callback' => 'getelella_interface_gentelella_callback',
    'page arguments' => array(1, 3),
    'access callback' => 'sitemap_node_access',
    'access arguments' => array('view', 3),
  );



  $items['dashboard/%/depot/%'] = array(
    'title' => 'Gérer dépot',
    'page callback' => 'node_7',
    'theme callback' => 'getelella_interface_gentelella_callback',
    'page arguments' => array(1, 3),
    'access callback' => 'sitemap_node_access',
    'access arguments' => array('view', 3),
  );

  $items['dashboard/%/depot-tel/%'] = array(
    'title' => 'Gérer dépot',
    'page callback' => 'node_8',
    'theme callback' => 'getelella_interface_gentelella_callback',
    'page arguments' => array(1, 3),
    'access callback' => 'sitemap_node_access',
    'access arguments' => array('view', 3),
  );


  $items['dashboard/%/groupeContactes/%'] = array(
    'title' => 'Gérer dépot',
    'page callback' => 'node_groupe_contact',
    'theme callback' => 'getelella_interface_gentelella_callback',
    'page arguments' => array(1, 3),
    'access callback' => 'sitemap_node_access',
    'access arguments' => array('view', 3),
  );


  $items['dashboard/%/tousLesContacts'] = array(
    'title' => 'Voir tous les contactes du groupe',
    'page callback' => 'page_tous_les_contactes',
    'theme callback' => 'getelella_interface_gentelella_callback',
    'page arguments' => array(1),
    'access callback' => 'sitemap_node_access',
    'access arguments' => array('view', 1),
  );


  $items['email/get/ajax/%'] = array(
    'page callback' => 'getelella_interface_get_ajax', // Render HTML.
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access callback' => 'sitemap_node_access',
    'access arguments' => array('view', 3),
    'delivery callback' => 'getelella_interface_callback_no_js_css',  // Magic goes here.
  );

  $items['ajax/get/liste/discussion/%'] = array(
    'page callback' => 'getelella_interface_get_liste_discussion', // Render HTML.
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access callback' => true,
    'delivery callback' => 'drupal_json_output'
  );

  $items['ajax/get/liste/discussion/%/%/%'] = $items['ajax/get/liste/discussion/%'];
  $items['ajax/get/liste/discussion/%/%/%']['page arguments'] = array(4, 5, 6);

  $items['ajax/get/liste/message/%/%/%'] = array(
    'page callback' => 'getelella_interface_get_liste_message', // Render HTML.
    'page arguments' => array(4, 5, 6),
    'type' => MENU_CALLBACK,
    'access callback' => true,
    'delivery callback' => 'drupal_json_output'
  );

  $items['ajax/get/liste/message/%'] = $items['ajax/get/liste/message/%/%/%'];
  $items['ajax/get/liste/message/%']['page arguments'] = array(4);

  $items['ajax/count/liste/message/%'] = array(
    'page callback' => 'getelella_interface_count_message', // Render HTML.
    'page arguments' => array(4, 5),
    'type' => MENU_CALLBACK,
    'access callback' => true,
    'delivery callback' => 'drupal_json_output'
  );

  $items['ajax/set/message/viewed/%'] = array(
    'page callback' => 'getelella_interface_set_discussion_read', // Render HTML.
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access callback' => true,
    'delivery callback' => 'drupal_json_output'
  );

  $items['ajax/get/command/liste/discussion/%'] = array(
    'page callback' => 'getelella_interface_button_form', // Render HTML.
    'page arguments' => array(5),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    //'access arguments' => array('access content'),
    'delivery callback' => 'getelella_interface_callback',  // Magic goes here.
  );

  $items['ajax/get/vuelist/%'] = array(
    'page callback' => 'getelella_interface_list_view', // Render HTML.
    'page arguments' => array(3),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
    //'access arguments' => array('access content'),
    'delivery callback' => 'getelella_interface_callback',  // Magic goes here.
  );

  $items['dashboard/%/form/feed'] = array(
    'title' => 'Form Tutorial',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('getelella_interface_new_feed', 1),
    'access callback' => TRUE,
    'description' => 'Crée un feed',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['test/%ctools_js/go/%'] = array(
    'page callback' => 'example_test_modal_callback',
    'page arguments' => array(1, null, 3),
    'access arguments' => array('access content'),
  );


  $items['dashboard/test'] = array(
    'title' => 'AJAX Example',
    'page callback' => 'getelella_interface_test_page_1',
    'page arguments' => array(1),
    'access callback' => true,
    'expanded' => TRUE,
    'theme callback' => 'getelella_interface_gentelella_callback',
  );
  return $items;
}


function node_7($gid, $nid_depot){
  global $gentelella_var;
  $gentelella_var['context']['nid_groupe'] = $gid;

  include_once(drupal_get_path('module','node') . '/node.pages.inc');
  return node_page_view(node_load($nid_depot));
}

function node_8($gid, $nid_depot){
  drupal_add_css(drupal_get_path('module', 'getelella_interface') . '/css/fichetel.css');
  return node_7($gid, $nid_depot);
}

function node_groupe_contact($gid, $nid_depot){
  drupal_add_css(drupal_get_path('module', 'getelella_interface') . '/css/fichetel.css');
  $noeud =  node_7($gid, $nid_depot);
  $noeud_rendu = drupal_render($noeud);


  $lien_html = "";
  if(sitemap_access('create contact content', "node", $gid)){
    $lien = url('node/add/contact',
      array('absolute' => TRUE,
        'query' => array(
          'og_group_ref' =>  $gid,
            'field_noeud_parent_sitemap' =>  $nid_depot,
            'field_maillage' =>  $nid_depot,
            'destination' => current_path()
        )
      )
    );
    $lien_html = '<a href="' . $lien . '">+ ajouter un contact</a>';
  }
  return $noeud_rendu . $lien_html;
}



function page_tous_les_contactes($gid){
  global $gentelella_var;
  $gentelella_var['context']['nid_groupe'] = $gid;
  return views_embed_view('contactes_membres_du_groupe_de_contactes', 'block_3', $gid);
}

function getelella_interface_test_page_1(){
  $form = drupal_get_form('form_test_checkbox');

  global $user;
      $user=user_load($user->uid);
      module_load_include('inc', 'user', 'user.pages');
      $user_form = drupal_get_form('user_profile_form', $user);

  $options = array();

  print "<pre>";
  print_r(og_get_permissions());
  print "</pre>";

  foreach (module_list(FALSE, FALSE, TRUE) as $module) {
    print_r($module);
    // Drupal 6
    // if ($permissions = module_invoke($module, 'perm')) {
    //  print_r($permissions);
    // }

    // Drupal 7
    /*if ($permissions = module_invoke($module, 'permission')) {
      print "<pre>";
      print_r($permissions);
      print "<pre/>";
    }*/
  }

  return 'ceci est un test!
      <div class="checkbox">
        <label>
          <input type="checkbox" class="flat" checked="checked"> Checked fff
        </label>
        <label>
          <input type="checkbox" class="flat" checked="checked"> Checked fff
        </label>
        <label>
          <input type="checkbox" class="flat" checked="checked"> Checked fff
        </label>
      </div>' . drupal_render($form) . drupal_render($user_form);

}


function form_test_checkbox($form, &$form_state){
  $tab = array(1 => "chat");


  $form['liste_groupes'] = array(
    '#type' => 'fieldset',
    '#title' => t('test'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#attributes' => array('id' => array('liste_des_groupes_fieldset')),
  );
  $form['liste_groupes']['les_transversalise'] = array(
    '#type' => 'checkboxes',
    '#options' => $tab,
    '#attributes' => array('class' => array('flat')),
    '#default_value' => "caca",
    '#title' => t('Noeud à transversaliser'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  return $form;
}

function user_menu_alter(&$items){
  $items['user/%user/edit'] = array(
    'title' => 'Modifier le profil',
    'page callback' => 'getelella_interface_test_page1',
    'page arguments' => array('user_profile_form', 1),
    'access callback' => true,
    //'theme callback' => 'getelella_interface_gentelella_callback',
    'type' => MENU_CALLBACK,
  );
  unset($items['user/%user/edit']['access arguments']);
  $items['user/%user/edit/situation'] = array(
    'title' => 'Modifier le profil',
    'page callback' => 'getelella_interface_page_edit_user_situation',
    'page arguments' => array(1),
    'access callback' => true,
    //'theme callback' => 'getelella_interface_gentelella_callback',
    'type' => MENU_CALLBACK,
  );
  $essai = $items['user/register'];

  $items['user/register'] = array(
    'title' => 'Create new account',
    'page callback' => 'getelella_interface_user_register_page',
    'access callback' => 'user_register_access',
    'type' => MENU_CALLBACK,
  );
  $t = 0;
}

function getelella_interface_user_register_page() {
  $form_ret = drupal_get_form('user_register_form_caca');
  return
    '<div class="section-test" id="formulaire-user">'
      . '<div class="bigpadding">
          <div id="block-espace" class="bg-white">
            <div id="espace-nav">
              <a href="' . url('user') . '">Se connecter</a>
              <a href="' . url('user/password') . '">Demander un nouveau mot de passe</a>
            </div>
            <div class="padd20">'
          . drupal_render($form_ret)
      . '   </div>
          </div>
        </div>'
  . '</div>';
}

function user_register_form_caca($form, &$form_state) {
  global $user;
  $form = getelella_interface_essai_form($form, $form_state, drupal_anonymous_user());

  $admin = user_access('administer users');

  // Pass access information to the submit handler. Running an access check
  // inside the submit function interferes with form processing and breaks
  // hook_form_alter().
  $form['administer_users'] = array(
    '#type' => 'value',
    '#value' => $admin,
  );

  // If we aren't admin but already logged on, go to the user page instead.
  if (!$admin && $user->uid) {
    drupal_goto('user/' . $user->uid);
  }

  $form['#user'] = drupal_anonymous_user();
  $form['#user_category'] = 'register';

  $form['#attached']['library'][] = array('system', 'jquery.cookie');
  $form['#attributes']['class'][] = 'user-info-from-cookie';

  // Start with the default user account fields.
  /*user_account_form($form, $form_state);

  // Attach field widgets, and hide the ones where the 'user_register_form'
  // setting is not on.
  $langcode = entity_language('user', $form['#user']);
  field_attach_form('user', $form['#user'], $form, $form_state, $langcode);
  foreach (field_info_instances('user', 'user') as $field_name => $instance) {
    if (empty($instance['settings']['user_register_form'])) {
      $form[$field_name]['#access'] = FALSE;
    }
  }

  if ($admin) {
    // Redirect back to page which initiated the create request;
    // usually admin/people/create.
    $form_state['redirect'] = $_GET['q'];
  }*/

  $form['actions'] = array('#type' => 'actions');
  $form['pied']['contenu']['submit']['#value'] = t('Soumettre l\'inscription');
  $form['pied']['contenu']['submit']['#weight'] = 2;


  $form['pied']['contenu']['captcha_test'] = array(
    '#type' => 'captcha',
    '#captcha_type' => 'image_captcha/Image',
    '#weight' => 1,
  );
  //$form['#validate'][] = 'user_register_validate';
  // Add the final user registration form submit handler.
  //$form['#submit'][] = 'user_register_submit';



  return $form;
}

function user_register_form_caca_submit($form, $form_state){
  require_once DRUPAL_ROOT . '/includes/password.inc';

  $username = $original_username = $form_state['values']['name'];
  $count = 1;
  while (user_load_by_name($username)) {
    $username = $original_username . $count++;
  }
  $form_state['values']['name'] = $username;

  $user = entity_create('user', array());
  $roles = array();

  $user->name = $username;
  $user->status    = 0;
  $user->roles     = drupal_map_assoc($roles + array(DRUPAL_AUTHENTICATED_RID));
  $user->init      = 'foo@bar.com';
  $user->mail      = 'foo@bar.com';
  $user->pass      = user_hash_password('password');

  // Once we have enough data, set the wrapper around the user object.
  $user = entity_metadata_wrapper('user', $user);

  $user->save();
  $form_state['user'] = user_load($user->uid->value());
  getelella_interface_essai_form_submit($form, $form_state);




  $user = user_load($user->uid->value());
  $emw_user = entity_metadata_wrapper('user', $user);
  $t = 0;

  $nombre_test = rand();
  $time_req = time();

  try {
    db_insert('validation_incription')->fields(array(
      'uid' =>  $emw_user->getIdentifier(),
      'nombretest'  => $nombre_test,
      'temps_req' => $time_req,
      'nobr_req' => 0,
    ))->execute();
    $t = 0;
    // No exception thrown; PDO thinks the record was inserted correctly.
  }
  catch (PDOException $e) {
  }

  $confirmer_url = url('validation_compte/' . $emw_user->getIdentifier() . '/' . $time_req . '/' . $nombre_test, array('absolute' => TRUE));

  $infirmer_url = url('validation_compte/' . $emw_user->getIdentifier() . '/' . $time_req . '/' . $nombre_test . "/cancel", array('absolute' => TRUE));



  $message = 'Bonjour monsieur ' . $emw_user->field_prenom->value() . ' '
      . $emw_user->field_nom_de_famille->value() . ', <br/> Vous êtes inscrit sur le site du Petit Peuple mais votre compte n\'est présentement pas activé. <br/>
      Veuillez cliquer sur le lien: '
      . '<a href="' . $confirmer_url . '">Confirmer que j\'ai bien demandé d\'ouvri un compte</a><br/>'
      . 'Sinon si ce n\'est pas vous ou que vous souhaitez fermet le compte, cliquez sur: '
      . '<a href="' . $infirmer_url . '">Confirmer fermer le compte</a>';
  // Send the email.
  $params = array(
      'subject' => t('Confirmez votre couriel pour terminer l\'inscription'),
      'body' => $message,
  );


  if (module_exists('sendgrid_integration')) {
    mailsystem_set(array('sendgrid_integration' => "HTMLMailSystem__SendGridMailSystem"));
    $success = drupal_mail('sendgrid_integration', 'test', $user->mail, language_default(), $params);
  }else{
    $success = drupal_mail('getelella_interface', 'any_key', $user->mail, language_default(), $params);
  }
  $t = 0;

  drupal_goto('user/' . $emw_user->getIdentifier() . '/edit', array('query'=>array(
  'variable_name1'=>'variable_value1',
  'variable_name2'=>'variable_value2',
  'variable_name3'=>'variable_value3',
  )));


}

function getelella_interface_mail($key, &$message, $params){
  switch ($key) {
    case 'any_key':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

function getelella_interface_page_edit_user_situation($uid){
  $form_ret = drupal_get_form('getelella_interface_user_situation_form', $uid);
  return
    '<div class="section-test" id="formulaire-user">'
      . '<div class="bigpadding">
          <div id="block-espace" class="bg-white">
            <div id="espace-nav">
              <a href="' . url('user/' . $uid->uid . '/edit') . '">Mon compte</a>
              <a href="' . url('user/' . $uid->uid . '/edit/situation') . '">Mon profil</a>
            </div>
            <div class="padd20">'
          . drupal_render($form_ret)
      . '   </div>
          </div>
        </div>'
  . '</div>';
}

function getelella_interface_user_situation_form($form, &$form_state, $uid){
$t = 0;
  module_load_include('inc', 'user', 'user.pages');
  $form = drupal_get_form('user_profile_form', $uid);

  $form_ret['principal'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="row">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['principal']['situation'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['principal']['envies'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['principal']['situation']['titre'] = array(
    '#type' => 'markup',
    '#markup' => '<h2 class="titre-bleu">Ma situation</h2>',
  );

  $form_ret['principal']['envies']['titre'] = array(
    '#type' => 'markup',
    '#markup' => '<h2 class="titre-bleu">Mes envies</h2>',
  );


  $form_ret['pied'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="row">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['pied']['contenu'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-12">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['principal']['situation']['field_activit_profesionnelle'] = $form['field_activit_profesionnelle'];
  $form_ret['principal']['situation']['field_activit_profesionnelle']['#weight'] = 1;
  unset($form_ret['principal']['situation']['field_activit_profesionnelle']['und']['#value']);

  $form_ret['principal']['situation']['field_profession'] = $form['field_profession'];
  $form_ret['principal']['situation']['field_profession']['#weight'] = 2;
  unset($form_ret['principal']['situation']['field_profession']['und'][0]['value']['#value']);

  $form_ret['principal']['situation']['field_domaine_de_competence'] = $form['field_domaine_de_competence'];
  $form_ret['principal']['situation']['field_domaine_de_competence']['#weight'] = 3;
  unset($form_ret['principal']['situation']['field_domaine_de_competence']['und']['#value']);

  $form_ret['principal']['situation']['field_vos_talents'] = $form['field_vos_talents'];
  $form_ret['principal']['situation']['field_vos_talents']['#weight'] = 4;
  unset($form_ret['principal']['situation']['field_vos_talents']['und'][0]['value']['#value']);

  $form_ret['principal']['situation']['field_commentaires'] = $form['field_commentaires'];
  $form_ret['principal']['situation']['field_commentaires']['#weight'] = 5;
  unset($form_ret['principal']['situation']['field_commentaires']['und'][0]['value']['#value']);

  $form_ret['principal']['envies']['field_domaine_d_actions'] = $form['field_domaine_d_actions'];
  unset($form_ret['principal']['envies']['field_domaine_d_actions']['und']['#value']);

  $form_ret['principal']['envies']['field_type_d_actions'] = $form['field_type_d_actions'];
  unset($form_ret['principal']['envies']['field_type_d_actions']['und']['#value']);

  $form_ret['principal']['envies']['field_mes_disponnibilit_s'] = $form['field_mes_disponnibilit_s'];
  unset($form_ret['principal']['envies']['field_mes_disponnibilit_s']['und']['#value']);

  $form_ret['principal']['envies']['field_pr_f_rence_mission'] = $form['field_pr_f_rence_mission'];
  unset($form_ret['principal']['envies']['field_pr_f_rence_mission']['und']['#value']);
  $form_ret['principal']['envies']['field_acceptez_d_tre_mobilis_pou'] = $form['field_acceptez_d_tre_mobilis_pou'];
  unset($form_ret['principal']['envies']['field_acceptez_d_tre_mobilis_pou']['und']['#value']);
  $form_ret['principal']['envies']['field_transport'] = $form['field_transport'];
  unset($form_ret['principal']['envies']['field_transport']['und']['#value']);

  $form_ret['principal']['envies']['field_prenom']['#weight'] = 2;
  unset($form_ret['principal']['envies']['field_prenom']['und'][0]['value']['#value']);

  $form_ret['pied']['contenu']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form_state['user'] = $form['#user'];
  $form_ret['#user_category'] = $form['#user_category'];
  return $form_ret;
}

function getelella_interface_user_situation_form_submit(&$form, &$form_state){
  $lang = 'und';
  $account = $form_state['user'];
  $values = $form_state['values'];
  $w_account = entity_metadata_wrapper('user', (object) $account);
  $w_account->field_activit_profesionnelle = $form_state['values']['field_activit_profesionnelle']['und'][0]['tid'];
  $w_account->field_profession = 	$form_state['values']['field_profession']['und'][0]['value'];

  $account->field_domaine_de_competence = $form_state['values']['field_domaine_de_competence'];

  $w_account->field_vos_talents = $form_state['values']['field_vos_talents']['und'][0]['value'];
  $w_account->field_commentaires = $form_state['values']['field_commentaires']['und'][0]['value'];


  $account->field_domaine_d_actions = $form_state['values']['field_domaine_d_actions'];
  $account->field_type_d_actions = $form_state['values']['field_type_d_actions'];
  $account->field_mes_disponnibilit_s = $form_state['values']['field_mes_disponnibilit_s'];
  $account->field_pr_f_rence_mission = $form_state['values']['field_pr_f_rence_mission'];
  $account->field_acceptez_d_tre_mobilis_pou = $form_state['values']['field_acceptez_d_tre_mobilis_pou'];
  $account->field_transport = $form_state['values']['field_transport'];

  user_save((object) array('uid' => $account->uid), (array) $account);
}

function getelella_interface_essai_form($form, &$form_state, $uid){
  module_load_include('inc', 'user', 'user.pages');
  $form = drupal_get_form('user_profile_form', $uid);

  $form_ret['principal'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="row">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['principal']['a_propos'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['principal']['a_propos']['titre'] = array(
    '#type' => 'markup',
    '#markup' => '<h2 class="titre-bleu">À propos de vous</h2>',
  );

  $form_ret['principal']['contact'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-6">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['principal']['contact']['titre'] = array(
    '#type' => 'markup',
    '#markup' => '<h2 class="titre-bleu">Contact</h2>',
  );

  $form_ret['pied'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="row">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form_ret['pied']['contenu'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-12">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );


  $active = array(0 => t('Mme'), 1 => t('Ms'));
  $form_ret['principal']['a_propos']['civilite'] = array(
    '#type' => 'radios',
    '#title' => t('Civilité'),
    '#default_value' => (isset($uid->field_sexe) && !$uid->field_sexe['und'][0]['value']) ? 1 : 0,
    '#title_display' => 'before',
    '#options' => array(t('Mme'), t('Ms')),
    '#attributes' => array('class' => array('flat')),
    //'#description' => t('Sélectionner la civilité'),
  );

/*  if(isset($form['field_sexe']['und']['#value'])){
    $form_ret['principal']['a_propos']['civilite']['#default_value'] = $form['field_sexe']['und']['#value'];
  }*/



  $form_ret['principal']['a_propos']['field_image_du_compte'] = $form['field_image_du_compte'];



    // Now we populate the array
    $anne = array();
    foreach (range((date('Y') - 100), (date('Y') - 7)) as $year){
        $anne[$year] = $year;
    }
    if(isset($form['field_annee_de_naissence']['und'])
        && isset($form['field_annee_de_naissence']['und'][0])
    ){
      $defaut_anne = $form['field_annee_de_naissence']['und'][0]['#default_value']['value'];
    }
    $form_ret['principal']['a_propos']['field_annee_de_naissence'] = array(
       '#type' => 'select',
       '#title' => t('Année de naissence:'),
       //'#title_display' => 'before',
       '#options' => $anne,
       '#default_value' => date("Y", strtotime($defaut_anne)),
       );






  $form_ret['principal']['a_propos']['field_prenom'] = $form['field_prenom'];
  $form_ret['principal']['a_propos']['field_prenom']['#weight'] = 2;
  unset($form_ret['principal']['a_propos']['field_prenom']['und'][0]['value']['#value']);
  $form_ret['principal']['a_propos']['field_nom_de_famille'] = $form['field_nom_de_famille'];
  unset($form_ret['principal']['a_propos']['field_nom_de_famille']['und'][0]['value']['#value']);
  $form_ret['principal']['a_propos']['field_adresse_postale'] = $form['field_adresse_postale'];
  $adresse_postale = &$form_ret['principal']['a_propos']['field_adresse_postale']['und'][0];

  unset($adresse_postale['country']['#value']);
  unset($adresse_postale['locality_block']['administrative_area']['#value']);
  unset($adresse_postale['locality_block']['locality']['#value']);
  unset($adresse_postale['locality_block']['postal_code']['#value']);
  unset($adresse_postale['street_block']['thoroughfare']['#value']);
  unset($adresse_postale['street_block']['premise']['#value']);


  $form_ret['principal']['a_propos']['field_annee_de_naissence']['#title_display'] = 'invisible';
  $form_ret['principal']['a_propos']['field_prenom']['#weight'] = 3;



  $form_ret['principal']['contact']['field_t_l_phone'] = $form['field_t_l_phone'];
  $form_ret['principal']['contact']['field_t_l_phone']['#weight'] = 1;
  $form_ret['principal']['contact']['dispo'] = $form['field_mes_disponnibilit_s'];
  unset($form_ret['principal']['contact']['dispo']['und']['#value']);
  $form_ret['principal']['contact']['dispo']['#weight'] = 2;
  if(isset($form['account']['mail']['mail'])){
    $form_ret['principal']['contact']['mail'] = $form['account']['mail']['mail'];
  }else if(isset($form['account']['mail'])){
    $form_ret['principal']['contact']['mail'] = $form['account']['mail'];
  }
  $form_ret['principal']['contact']['mail']['#weight'] = 3;
  unset($form_ret['principal']['contact']['mail']['#value']);
  $form_ret['principal']['contact']['name'] = $form['account']['name'];
  $form_ret['principal']['contact']['name']['#weight'] = 4;
  unset($form_ret['principal']['contact']['name']['#value']);
  if(isset($form['account']['pass'])){
    $form_ret['principal']['contact']['pass'] = $form['account']['pass'];
  }else{
    $form_ret['principal']['contact']['pass'] = array(
      '#type' => 'password_confirm',
      '#size' => 25,
      '#description' => t('Provide a password for the new account in both fields.'),
      '#required' => TRUE,
    );
  }
  $t = 0;
  $form_ret['principal']['contact']['pass']['#weight'] = 5;
  unset($form_ret['principal']['contact']['pass']['#value']);




  unset($form_ret['principal']['contact']['field_t_l_phone']['und'][0]['value']['#value']);




  $form_ret['pied']['contenu']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form_state['user'] = $form['#user'];
  $form_ret['#user_category'] = $form['#user_category'];
  return $form_ret;
}


function getelella_interface_essai_form_submit(&$form, &$form_state){
  $t = 0;
  //module_load_include('inc', 'user', 'user.pages');
  //user_profile_form_submit($form, $form_state);
  $t = 0;
  $values = $form_state['values'];
  $lang = 'und';
  $account = $form_state['user'];
  $w_account = entity_metadata_wrapper('user', (object) $account);

  $sexe = ($form_state['values']['civilite'] == 1) ? 0 : 1 ;
  $w_account->field_sexe = $sexe;


  $w_account->field_prenom = $form_state['values']['field_prenom'][$lang][0]['value'];
  $w_account->field_nom_de_famille = $form_state['values']['field_nom_de_famille'][$lang][0]['value'];
  $account->field_annee_de_naissence['und'][0]['value'] = $form_state['values']['field_annee_de_naissence'] . "-01-01 00:00:00";

  $account->field_adresse_postale['und'][0]['country'] = $form_state['values']['field_adresse_postale']['und'][0]['country'];
  $account->field_adresse_postale['und'][0]['administrative_area'] = $form_state['values']['field_adresse_postale']['und'][0]['administrative_area'];
  $account->field_adresse_postale['und'][0]['locality'] = $form_state['values']['field_adresse_postale']['und'][0]['locality'];
  $account->field_adresse_postale['und'][0]['postal_code'] = $form_state['values']['field_adresse_postale']['und'][0]['postal_code'];
  $account->field_adresse_postale['und'][0]['thoroughfare'] = $form_state['values']['field_adresse_postale']['und'][0]['thoroughfare'];
  $account->field_adresse_postale['und'][0]['premise'] = $form_state['values']['field_adresse_postale']['und'][0]['premise'];

  if(isset($values['field_t_l_phone']['und'][0]['value'])){
    $account->field_t_l_phone['und'][0]['value'] = $values['field_t_l_phone']['und'][0]['value'];
  }

  $account->field_mes_disponnibilit_s = $form_state['values']['field_mes_disponnibilit_s'];
  $account->mail = $form_state['values']['mail'];
  $account->name = $form_state['values']['name'];

  $account->pass = $form_state['values']['pass'];

  user_save((object) array('uid' => $account->uid), (array) $account);
  $t = 0;
}

function getelella_interface_test_page1($form_id, $uid){
  $form_ret = drupal_get_form('getelella_interface_essai_form', $uid);
    return
    '<div class="section-test" id="formulaire-user">'
      . '<div class="bigpadding">
          <div id="block-espace" class="bg-white">
            <div id="espace-nav">
              <a href="' . url('user/' . $uid->uid . '/edit') . '">Mon compte</a>
              <a href="' . url('user/' . $uid->uid . '/edit/situation') . '">Mon profil</a>
            </div>
            <div class="padd20">'
          . drupal_render($form_ret)
      . '   </div>
          </div>
        </div>'
  . '</div>';
}

function getelella_interface_user_form1($form, &$form_state) {

}

function getelella_interface_count_message($discussion_nid){
global $user;
  $seen = db_select('forum_reader_observer', "f")
  ->fields("f", array("seen"))
  ->condition("f.nid", array($discussion_nid), '=')
  ->condition("f.uid", array($user->uid), '=')
  ->execute()->fetchField();
  $t = 0;



  $query = new EntityFieldQuery();
  $nombre_de_mess = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'message_de_discission')
    ->fieldCondition('field_noeud_parent_sitemap', 'target_id', $discussion_nid)
    ->propertyCondition('created', $seen, '>')
    ->count()
    ->execute();


  return $nombre_de_mess;
}


function example_test_modal_callback($js = FALSE, $form_state = null, $nid_forum) {
  if ($js) {
    ctools_include('ajax');
    ctools_include('modal');
    if(!$form_state){
      $form_state = array(
        'ajax' => TRUE,
        'title' => t('Login'),
        'nid_forum' => $nid_forum,
      );
    }
    $output = array();
    if(!empty($form_state['executed'])){
  		$output[] = ctools_modal_command_dismiss(); //Close modal automatically
  		//$output[] = ajax_command_alert("Alert requested at " . date('r'));
  		$nid_forum = $form_state['nid_forum'];
  		$output[] = ajax_command_invoke("#liste_discussion", "refresh_discussion_list", $arguments = array("dernier", true));
    }else{
      $output = ctools_modal_form_wrapper('getelella_interface_sample_form', $form_state);
    }
    print ajax_render($output);
    exit;
  }
  else {
    return drupal_get_form('getelella_interface_sample_form');
  }
}



function getelella_interface_sample_form($form, &$form_state, $nid_forum) {
  global $user;
	$form = array();
	if(!$nid_forum && isset($form_state['nid_forum'])){
    $nid_forum = $form_state['nid_forum'];
	}

  //$entity = node_load(23882);
	/*$form_key = 'bundle_' . $entity->type;
  $form[$form_key] = array(
    '#type' => 'fieldset',
    '#title' => 'test',
    '#parents' => array($form_key),
  );
  field_attach_form("node", $entity, $form[$form_key], $form_state, LANGUAGE_NONE);*/

  $form['corps'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-8">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );


  $form['corps']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Titre du sujet de discussion'),
    '#default_value' => "",
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => true,
  );

  $form['corps']['message'] = array(
    '#type' => 'text_format',
    '#title' => t('Message'),
    '#default_value' => "",
    '#format' => 'full_html',
  );



  if(isset($nid_forum) && $nid_forum){
    $form['nid_forum'] = array('#type' => 'hidden', '#value' => $nid_forum);
  }


  $form['footer'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-4">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );
  $form['footer']['test_essai'] = array(
    '#value' => t("soumettre"),
    '#type' => 'submit',
    '#ajax' => array(
      'wrapper' => 'pop-up',
      'callback' => 'example_test_modal_callback',
    ),
    '#weight' => 100,
  );

	return $form;
}



function getelella_interface_ajax_form($form, &$form_state, $nid_forum, $reset = false) {
  global $user;
	$form = array();
	if(!$nid_forum && isset($form_state['nid_forum'])){
    $nid_forum = $form_state['nid_forum'];
	}

  $entity = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'discussion',
    'language' => LANGUAGE_NONE,
  );


  $form['#prefix'] = '<div id="form-wrapper">';
  $form['#suffix'] = '</div>';


  $form['corps'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-8">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );

  $form['corps']['markup'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="reload-form">Effacer la video</div>',
  );

  $form['corps']['message'] = array(
    '#type' => 'text_format',
    '#title' => t('Message'),
    '#default_value' => "",
    '#format' => 'full_html',
  );

  $entity = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'message_de_discission',
    'language' => LANGUAGE_NONE,
  );

  $form_tmp = array();
  field_attach_form('node', $entity, $form_tmp, $form_state, NULL, array());
  $form['caca']['field_sku'] = $form_tmp['field_video_en_ligne'];

  if(isset($nid_forum) && $nid_forum){
    $form['nid_forum'] = array(
        '#type' => 'textfield',
        '#attributes'=>array('style'=>"display:none"),
        '#default_value' => $nid_forum
    );
  }

  $form['footer'] = array(
    '#type' => 'fieldset',
    '#prefix' => '<div class="col-md-4">',
    '#suffix' => '</div>',
    '#weight' => 100,
    '#ignore_fieldset' => true,
  );
  $form['footer']['test_essai'] = array(
    '#value' => t("soumettre"),
    '#type' => 'submit',
    '#ajax' => array(
      'effect' => 'fade',
      'callback' => 'getelella_interface_ajax_form_callback',
      'wrapper' => 'form-wrapper',
      'method' => 'replace',
    ),
    '#weight' => 100,
  );
	return $form;
}


function getelella_interface_ajax_form_submit(&$form, &$form_state){
  global $user;
  $input_num = $form_state['input'];
  $nid_forum = (isset($form_state['values']['nid_forum'])) ? $form_state['values']['nid_forum'] : false;
  $message = $form_state['values']['message'];
  $title = "reponse_discussion";
  $node = entity_create('node', array('type' => 'message_de_discission'));
  $node->uid = $user->uid;
  $emw_node = entity_metadata_wrapper('node', $node);
  $emw_node->title = $title;
  $emw_node->body->set($message);
  if($form_state['values']['field_sku']['und'][0]['fid']){
    $file = file_load($form_state['values']['field_sku']['und'][0]['fid']);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);

    // We will save file under this location.
    $destination = 'public://Camera/';

    // Make sure destination directory exists before moving files to that path.
    // This will create directory if it does not exists.
    file_prepare_directory($destination, FILE_CREATE_DIRECTORY);
    $node->field_video_en_ligne[$node->language][0] = (array) $file;

    // Default file type field comes with this extra properties.
    $node->field_video_en_ligne[$node->language][0]['display'] = 2;
    $node->field_video_en_ligne[$node->language][0]['description'] = 'Our special PDF';
  }

  if($nid_forum){
    $emw_node->field_noeud_parent_sitemap = $nid_forum;
  }
  $emw_node->save();
  return $form;
}

function getelella_interface_ajax_form_callback(&$form, &$form_state){
  ctools_include('ajax');
  ctools_include('modal');

  $nid_forum = (isset($form_state['values']['nid_forum'])) ? $form_state['values']['nid_forum'] : false;
  $form['corps']['message']['value']['#value'] = $form['corps']['message']['#default_value'];
  $form['caca']['field_sku']['und'][0]['#value']  = $form['caca']['field_sku']['und'][0]['#default_value'];

  $commands = array();
  $commands[] = ajax_command_invoke("#liste_message_discussion", "refresh_discussion_message_list", $arguments = array("dernier", true));
  $commands[] = ajax_command_replace("#form-wrapper", drupal_render($form));
  $commands[] = ajax_command_invoke("#edit-field-sku-und-0", "reinitMediaRecorder", $arguments = array());
  return array('#type' => 'ajax', '#commands' => $commands);
}

function getelella_interface_ajax_form_validate(&$form, &$form_state) {
  $r = 0;
}


function getelella_interface_js_test_essai(){
  $commands = array();
  $commands[] = ajax_command_alert("Alert requested at " . date('r'));

  return array('#type' => 'ajax', '#commands' => $commands);
}

function getelella_interface_sample_form_submit($form, &$form_state) {
  global $user;
  $input_num = $form_state['input'];
  $t = 0;
  $nid_forum = (isset($form_state['values']['nid_forum'])) ? $form_state['values']['nid_forum'] : false;
  $message = $form_state['values']['message'];
  $title = $form_state['values']['title'];
  $node = entity_create('node', array('type' => 'discussion'));
  $node->uid = $user->uid;
  $emw_node = entity_metadata_wrapper('node', $node);
  $emw_node->title = $title;
  $emw_node->body = $message;
  if($nid_forum){
    $emw_node->field_noeud_parent_sitemap = $nid_forum;
  }
  $emw_node->save();
}

function getelella_interface_get_discussion($nid_dicsussion){
  $discussion = node_load($nid_dicsussion);
  $nbr_mes = getelella_interface_count_message($nid_dicsussion);
  if(sitemap_node_access('view', $nid_dicsussion)){
    $liste_discussions = '<div class="col-md-12 item-discussion-forum">
    <a class="block-100 testeee">
      <div class="row-eq-height">
        <div class="test1 col-md-2 col-sm-2 col-xs-4">
          <span class="glyphicon glyphicon-folder-close fa-5x" aria-hidden="true"></span>
        </div>
        <div class="test2 inline-block col-md-7 col-sm-5 col-xs-8">
          <span class="titre">' . $discussion->title . '</span>
        </div>
        <div class="test3 col-md-2 col-sm-3 inline-block justify-right">
          <span class="flex-align-self-center">
            <input checked data-toggle="toggle" data-on="<i class=\'fa fa-play\'></i> Play" data-off="<i class=\'fa fa-pause\'></i> Pause" type="checkbox">
          </span>
        </div>
        <div class="test4 col-md-1 col-sm-2 align-middle inline-block justify-right">
          <span class="badge badge-success align-middle fa-2x nbr-non-lu">' . $nbr_mes . '</span>
        </div>
      </div>
      <input type="hidden" name="forum_id" value="' . $discussion->nid . '">
    </a>
    </div>';
  }else{
    $liste_discussions = "";
  }
  return $liste_discussions;
}

function getelella_interface_get_liste_discussion($nid_forum, $position = null, $timestamp = null){
    $nombre_interval = 7;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'discussion')
      ->fieldCondition('field_noeud_parent_sitemap', 'target_id', $nid_forum)
      ->propertyOrderBy('created', 'DESC');


    $queryCount = new EntityFieldQuery();
    $queryCount->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'discussion')
      ->fieldCondition('field_noeud_parent_sitemap', 'target_id', $nid_forum)
      ->propertyOrderBy('created', 'DESC');

    if($position == "premier"){
      $query->propertyCondition('created', $timestamp, '<');
      $queryCount->propertyCondition('created', $timestamp, '<');
      $query->range(0, $nombre_interval);
    }else if($position == "dernier"){
      $query->propertyCondition('created', $timestamp, ">");
      $queryCount->propertyCondition('created', $timestamp, '>');
    }else{
      $query->range(0, $nombre_interval);
    }

    $result = $query->execute();
    $num_rows = $queryCount->count()->execute();
    $liste_discussions = "";
    if(isset($result['node'])){
      $nb_res = count($result['node']);
      $compt = 1;
      foreach(array_reverse($result['node']) as $nid => $val){
        $dicscussion = node_load($val->nid);
        $liste_discussions .= getelella_interface_get_discussion($val->nid);
        if($compt == 1){
          $liste_discussions .= '<input type="hidden" name="premier_timestamp" value="' . $dicscussion->created . '">';
        }
        if($compt == $nb_res){
          $liste_discussions .= '<input type="hidden" name="dernier_timestamp" value="' . $dicscussion->created . '">';
        }
        $compt++;
      }
      if($nb_res >= $num_rows && $position == "premier"){
        $liste_discussions = '<input type="hidden" name="liste_termine" value="true">' . $liste_discussions;
      }
    }
    if($position == "dernier" && $nb_res == 0){
      $liste_discussions = "empty";
    }
    return $liste_discussions;
}

function getelella_interface_set_discussion_read($nid_forum){
  getelella_interface_set_discussion_lue($nid_forum, time());
  return 0;
}

function getelella_interface_set_discussion_lue($nid_forum, $temps){
  global $user;
  $seen = db_select('forum_reader_observer', f)
  ->condition("f.nid", array($nid_forum), '=')
  ->condition("f.uid", array($user->uid), '=')
  ->countQuery()->execute()->fetchField();

  if($seen < 1){
    try {
      db_insert('forum_reader_observer')->fields(array(
        'nid' =>  $nid_forum,
        'uid'  => $user->uid,
        'seen' => $temps,
      ))->execute();
      $t = 0;
      // No exception thrown; PDO thinks the record was inserted correctly.
    }
    catch (PDOException $e) {
    }
  }else{
    $t = 0;
    db_update('forum_reader_observer')
      ->fields(array(
        'seen' => $temps,
      ))
      ->condition("nid", array($nid_forum), '=')
      ->condition("uid", array($user->uid), '=')
      ->execute();
  }
}

function getelella_interface_get_liste_message($nid_forum, $position = null, $timestamp = null){

  global $user;
  $user2 = user_load($user->uid);
  getelella_interface_set_discussion_lue($nid_forum, time());
  $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'message_de_discission')
      ->fieldCondition('field_noeud_parent_sitemap', 'target_id', $nid_forum)
      ->propertyOrderBy('created', 'DESC');

   $queryCount = new EntityFieldQuery();
   $queryCount->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'message_de_discission')
      ->fieldCondition('field_noeud_parent_sitemap', 'target_id', $nid_forum)
      ->propertyOrderBy('created', 'DESC');



      if($position == "premier"){
        $query->propertyCondition('created', $timestamp, '<');
        $queryCount->propertyCondition('created', $timestamp, '<');
        $query->range(0, 10);
      }else if($position == "dernier"){
        $query->propertyCondition('created', $timestamp, ">");
        $queryCount->propertyCondition('created', $timestamp, '>');
      }else{
        $query->range(0, 10);
      }
      //->sort('created' , 'DESC');
      //->propertyOrderBy('title', 'ASC');
      //->sort('created' , 'DESC');
    $result = $query->execute();
    $num_rows = $queryCount->count()->execute();
    $nb_res = 0;
    $liste_discussions = "";
    if(isset($result['node'])){
      $nb_res = count($result['node']);
      $compt = 1;
      foreach(array_reverse($result['node']) as $cle => $val){

        if($message = node_load($val->nid)){
          $t = 0;
          $emw_message = entity_metadata_wrapper('node', $message);

          $champ = field_view_field('node', $message, 'field_video_en_ligne', array('type' => 'file_video', 'label' => 'hidden'));

          $test = $emw_message->body->value->value(array('sanitize' => TRUE));
          $message_html = '<li>
            <img class="avatar" src="' . file_create_url($user2->field_image_du_compte['und'][0]['uri']) . '" alt="Avatar">
            <div class="message_date">
                <h3 class="date text-info">' . date("j" , $message->created) . '</h3>
                <p class="month">' . date("M" , $message->created) . '</p>
                <p class="hour">' . date("G:i" , $message->created) . '</p>
            </div>
            <div class="message_wrapper">
                <h4 class="heading">' . $user2->name . '</h4>
                <blockquote class="message">' . drupal_render($champ) . $test . '</blockquote>
                <br>
                <p class="url">
                    <span class="fs1 text-info" aria-hidden="true" data-icon=""></span>
                    <a href="#">
                      <i class="fa fa-paperclip"></i>
                      User Acceptance Test.doc
                    </a>
                </p>
            </div>
        </li>';

          //$liste_discussions .= '<div class="">' . $message_html . '</div>';
          $liste_discussions .= $message_html;
          if($compt == 1){
            $liste_discussions .= '<input type="hidden" name="premier_timestamp" value="' . $message->created . '">';
          }
          if($compt == $nb_res){
            $liste_discussions .= '<input type="hidden" name="dernier_timestamp" value="' . $message->created . '">';
            //début d'ajout de consultation
          }
        }
        $compt++;
      }
      /*if($nb_res >= $num_rows && $position == "premier"){
        $liste_discussions = '<input type="hidden" name="liste_termine" value="true">' . $liste_discussions;
      }*/

    }
    if($nb_res >= $num_rows && $position == "premier"){
      $liste_discussions = '<input type="hidden" name="liste_termine" value="true">' . $liste_discussions;
    }
    if($position == "dernier" && $nb_res == 0){
      $liste_discussions = "empty";
    }
    return $liste_discussions;
}

function getelella_interface_button_form($nid_forum) {
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  $form = array();

  $form['url'] = array(
    '#type' => 'hidden',
    // The name of the class is the #id of $form['ajax_button'] with "-url"
    // suffix.
    '#attributes' => array('class' => array('ctools-ajax-sample-button-url')),
    '#value' => url('test/nojs/go/' . $nid_forum),
  );

  $form['ajax_button'] = array(
    '#type' => 'button',
    '#value' => 'Wizard (button modal)',
    '#attributes' => array('class' => array('ctools-use-modal')),
    '#id' => 'ctools-ajax-sample-button',
  );
  return $form;
}

function getelella_interface_view_forum($nid_groupe = null, $nid_forum = null){
  global $gentelella_var;

  $gentelella_var['context']['nid_groupe'] = $nid_groupe;
  $output = "";

  $form = array();
	if(isset($form_state['nid_forum'])){
    $nid_forum = $form_state['nid_forum'];
	}
	if($nid_forum && sitemap_access("create message_de_discission content", "node", $nid_groupe)){
    $form = drupal_get_form('getelella_interface_ajax_form', $nid_forum);
    $form = drupal_render($form);
	}else{
	  $form = "";
	}

  drupal_add_css(drupal_get_path('module', 'getelella_interface') . '/css/forum.css');

  drupal_add_css("https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css");
  drupal_add_js("https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js");
  drupal_add_js(drupal_get_path('module', 'getelella_interface') . "/test.js");

  //$lien_modal = drupal_render(getelella_interface_button_form($nid_forum));

  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();

  if(sitemap_access('create discussion content', "node", $nid_groupe)){
    $lien_modal = l('Ajouter un sujet de discussion', 'test/nojs/go/' . $nid_forum, array(
     'attributes' => array('class' => 'ctools-use-modal ctools-use-modal-cache', 'id' => 'test678'))
    );
  }else{
    $lien_modal = "";
  }



  //$lien_modal = ctools_modal_text_button(t('ajouter ce qu il faut'), 'test/nojs/go/' . $nid_forum, t('Pick an animal'));


  //fonction lister les sous discussions: celle noeud parent sitemap enfant
  //noeud de bundle discussion avec le champ noeud_parent_sitemap egal à l'if


  $liste_test = '<div class="col-md-5" id="liste_discussion">' . getelella_interface_get_liste_discussion($nid_forum) . '</div>';



  if(($forum = node_load($nid_forum))
      && sitemap_node_access('view', $nid_forum)
  ){
    $output =
    '<div class="x_panel">
        <div class="x_title">
            <h2>
                Forum
                <small>' . $forum->title . '</small>
            </h2>
            <ul class="nav navbar-right panel_toolbox">
                <li>
                    <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
                </li>
                <li class="dropdown">
                    <a class="dropdown-toggle" href="#" data-toggle="dropdown" role="button" aria-expanded="false"><i class="fa fa-wrench"></i></a>
                    <ul class="dropdown-menu" role="menu">
                        <li>
                            <a href="#">Settings 1</a>
                        </li>
                        <li>
                            <a href="#">Settings 2</a>
                        </li>
                    </ul>
                </li>
                <li>
                    <a class="close-link"><i class="fa fa-close"></i></a>
                </li>
            </ul>
            <div class="clearfix"></div>
        </div>
        <div class="x_content" style="display: block;">'
          . $lien_modal .
          '<div class="row">'
              . $liste_test . '<ul id="liste_message_discussion" class="col-md-7 messages"></ul>' . $form .
          '</div>
        </div>
    </div>' .
     '<input type="hidden" name="nid_forum_page" value="' . $nid_forum . '">';

  }
  return $output;
}

function getelella_interface_new_forum($nid_groupe = null){
  global $gentelella_var;
  $gentelella_var['context']['nid_groupe'] = $nid_groupe;
  global $user;
  module_load_include('inc', 'node', 'node.pages');
  $node = (object) array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'group_forum',
    'language' => LANGUAGE_NONE,
  );
  $form = drupal_get_form('group_forum' . '_node_form', $node);

  return drupal_render($form);
}

function getelella_interface_list_view(){
  $output = "";

  $list = array('Cat', 'Dog', 'Mouse', 'Horse', 'Pony', 'Winged mongoose');
  $per_page = 2;

  // Initialise the pager
  $current_page = pager_default_initialize(count($list), $per_page);

  // Split your list into page sized chunks
  $chunks = array_chunk($list, $per_page, TRUE);

  // Show the pager
  $output .= '<div id="pager">' . theme('pager', array('quantity', count($list), 'attributes' => array('class' => 'node-pager', 'id' => 'node_pager')))
   . '</div>';

  // Show the appropriate items from the list
  $output .= theme('item_list', array(
      'items' => $chunks[$current_page], 'attributes' => array('class' => 'node-list', 'id' => 'node_list')
  ));
  return $output;
}

function page_test_pp(){
      drupal_add_js(drupal_get_path('module', 'getelella_interface') . '/test.js', 'file');
      $output = getelella_interface_list_view();


  return $output;
}

function getelella_interface_retourner_menu_opp_og($nid_groupe){
  $retour = "";
  if(sitemap_access('manage roles', 'node', $nid_groupe)){
    $retour .= '
    <li>
      <a href="' .  $lien = url('group/node/' . $nid_groupe . '/admin/roles', array('absolute' => TRUE)) . '">
        <span class="glyphicon glyphicon-education"></span> Gérer les rôles du groupe
      </a>
    </li>';
  }
  if(sitemap_access('manage members', 'node', $nid_groupe)){
    $retour .= '
    <li>
      <a href="' .  $lien = url('group/node/' . $nid_groupe . '/admin/people', array('absolute' => TRUE)) . '">
        <span class="glyphicon glyphicon-user"></span> Gérer les membres du groupe
      </a>
    </li>';
  }
  if(sitemap_access('manage permissions', 'node', $nid_groupe)){
    $retour .= '
    <li>
      <a href="' .  $lien = url('group/node/' . $nid_groupe . '/admin/permissions', array('absolute' => TRUE)) . '">
        <span class="glyphicon glyphicon-saved"></span> Gérer les droits du groupe
      </a>
    </li>';
  }
  if(sitemap_access('add user', 'node', $nid_groupe)){
    $retour .= '
    <li>
      <a href="' .  $lien = url('group/node/' . $nid_groupe . '/admin/people/add-user', array('absolute' => TRUE)) . '">
        <span class="glyphicon glyphicon-plus"></span> Ajouter des membres au groupe
      </a>
    </li>';
  }

  if(sitemap_access('Rendre le groupe transversal', 'node', $nid_groupe)){
    $retour .= '
    <li>
      <a href="' .  $lien = url('transversal_hierarchy/' . $nid_groupe, array('absolute' => TRUE)) . '">
        <span class="glyphicon glyphicon-plus"></span> Gérer la transversalisation
      </a>
    </li>';
  }

  if($retour != ""){
    $retour =
      '<li><a><i class="fa fa-edit"></i> Gérer le groupe <span class="fa fa-chevron-down"></span></a>
        <ul class="nav child_menu">'
          . $retour .
        '</ul>
       </li>';
  }
  return $retour;
}

function getelella_interface_get_lien_page_du_groupe($nid_groupe){
    $retour = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->fieldCondition('field_groupe_controlant', 'target_id', $nid_groupe)
      ->fieldCondition('field_si_groupe_dedie', 'value', true);
    $result_parent = $query->execute();
    if(isset($result_parent['node'])){
      foreach($result_parent['node'] as $cle => $row){
         $noeud = node_load($row->nid);
         $retour[] = array(
             'title' => $noeud->title,
             'url' => url(drupal_get_path_alias('node/' . $row->nid), array('absolute' => TRUE)),
         );
      }
    }
    return $retour;
}

function getelella_interface_affiche_menu($nid_groupe){
  /*if($lien_profile_photo){
                print $lien_profile_photo;
  }*/
  global $user;
  $user2 = user_load($user->uid);
  if(isset($user2->field_image_du_compte['und'][0])){
    $image_user = drupal_realpath($user2->field_image_du_compte['und'][0]['uri']);
  }else{
    $image_user = false;
  }

  if(ctype_digit($nid_groupe)){
    $nid_groupe = intval($nid_groupe);
  }else{
    $nid_groupe = null;
  }
  $output = "";

  if($nid_groupe){
    $lien_retour = getelella_interface_get_lien_page_du_groupe($nid_groupe);
    $t = 0;


    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'boite_de_courriel')
      ->fieldCondition('og_group_ref', 'target_id', $nid_groupe)
      ->propertyOrderBy('title', 'ASC');
    $result = $query->execute();

    $liste_email_html = "";
    if(isset($result['node'])){
      foreach($result['node'] as $nid => $info){
        $boite_courriele = node_load($nid);
        if(node_access("view", $boite_courriele)){
          $lien = url('dashboard/' . $nid_groupe . '/inbox/' . $nid, array('absolute' => TRUE));
          $liste_email_html .= '<li><a href="' . $lien . '">' . $boite_courriele->title . '</a></li>';
        }
      }
      $liste_email_html = '<ul class="nav child_menu">' . $liste_email_html . '</ul>';
      $liste_email_html = '<li><a><i class="fa fa-edit"></i> Les emails <span class="fa fa-chevron-down"></span></a>' . $liste_email_html . '</li>';
    }


    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'depot_de_rapport_annuel')
      ->fieldCondition('og_group_ref', 'target_id', $nid_groupe)
      ->propertyOrderBy('title', 'ASC');
    $result = $query->execute();



    $liste_depot_html = "";

    if(isset($result['node'])){
      foreach($result['node'] as $nid => $info){
        $depot_rapport = node_load($nid);
        if(node_access("view", $depot_rapport)){
          $lien = url('dashboard/' . $nid_groupe . '/depot/' . $nid, array('absolute' => TRUE));
          $liste_depot_html .= '<li><a href="' . $lien . '">' . $depot_rapport->title . '</a></li>';
        }
      }
    }
    $lien = url('node/add/depot-de-rapport-annuel',
          array('absolute' => TRUE,
              'query' => array(
                            'og_group_ref' => $nid_groupe,
                            'field_noeud_parent_sitemap' => $nid_groupe,
                            'destination' => current_path()
                         )
              )
      );
    if(sitemap_access('create depot_de_rapport_annuel content', "node", $nid_groupe)){
      $liste_depot_html .= '<li><a href="' . $lien . '"><i class="fa fa-edit"></i>' . 'créer un depot de rapports' . '</a></li>';
    }
    $liste_depot_html = '<ul class="nav child_menu">' . $liste_depot_html . '</ul>';
    $liste_depot_html = '<li><a><i class="fa fa-edit"></i> Rapports d activitées <span class="fa fa-chevron-down"></span></a>' . $liste_depot_html . '</li>';



    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'depot_de_rapports_t_l_phoniques')
      ->fieldCondition('og_group_ref', 'target_id', $nid_groupe)
      ->propertyOrderBy('title', 'ASC');
    $result = $query->execute();


    $liste_depot_tel_html = "";

    if(isset($result['node'])){
      foreach($result['node'] as $nid => $info){
        $depot_rapport = node_load($nid);
        if(node_access("view", $depot_rapport)){
          $lien = url('dashboard/' . $nid_groupe . '/depot-tel/' . $nid, array('absolute' => TRUE));
          $liste_depot_tel_html .= '<li><a href="' . $lien . '">' . $depot_rapport->title . '</a></li>';
        }
      }
    }
    $lien = url('node/add/depot-de-rapports-t-l-phoniques',
          array('absolute' => TRUE,
              'query' => array(
                            'og_group_ref' => $nid_groupe,
                            'field_noeud_parent_sitemap' => $nid_groupe,
                            'destination' => current_path()
                         )
              )
      );
    if(sitemap_access('create depot_de_rapports_t_l_phoniques content', "node", $nid_groupe)){
      $liste_depot_tel_html .= '<li><a href="' . $lien . '"><i class="fa fa-edit"></i>' . 'créer un depot de rapports téléphoniques' . '</a></li>';
    }
    $liste_depot_tel_html = '<ul class="nav child_menu">' . $liste_depot_tel_html . '</ul>';
    $liste_depot_tel_html = '<li><a><i class="fa fa-edit"></i> Rapports d téléphoniques <span class="fa fa-chevron-down"></span></a>' . $liste_depot_tel_html . '</li>';






    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'groupe_de_contactes')
      ->fieldCondition('og_group_ref', 'target_id', $nid_groupe)
      ->propertyOrderBy('title', 'ASC');
    $result = $query->execute();


    $liste_depot_tel_html = "";

    if(isset($result['node'])){
      foreach($result['node'] as $nid => $info){
        $depot_rapport = node_load($nid);
        if(node_access("view", $depot_rapport)){
          $lien = url('dashboard/' . $nid_groupe . '/groupeContactes/' . $nid, array('absolute' => TRUE));
          $liste_depot_tel_html .= '<li><a href="' . $lien . '">' . $depot_rapport->title . '</a></li>';
        }
      }
    }
    $lien = url('node/add/groupe-de-contactes',
          array('absolute' => TRUE,
              'query' => array(
                            'og_group_ref' => $nid_groupe,
                            'field_noeud_parent_sitemap' => $nid_groupe,
                            'destination' => current_path()
                         )
              )
      );
    $lien_tous_contacts = url('dashboard/' . $nid_groupe . '/tousLesContacts', array('absolute' => TRUE));
    if(sitemap_access('view contact content', "node", $nid_groupe)){
      $liste_depot_tel_html = '<li><a href="' . $lien_tous_contacts . '"><i class="fa fa-edit"></i>' . 'Tout' . '</a></li>' . $liste_depot_tel_html;
    }
    if(sitemap_access('create groupe_de_contactes content', "node", $nid_groupe)){
      $liste_depot_tel_html .= '<li><a href="' . $lien . '"><i class="fa fa-edit"></i>' . 'créer un groupe de contactes' . '</a></li>';
    }

    $liste_depot_tel_html = '<ul class="nav child_menu">' . $liste_depot_tel_html . '</ul>';
    $liste_depot_tel_html = '<li><a><i class="fa fa-edit"></i> Groupe de contactes <span class="fa fa-chevron-down"></span></a>' . $liste_depot_tel_html . '</li>';









    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'group_forum')
      ->fieldCondition('og_group_ref', 'target_id', $nid_groupe)
      ->propertyOrderBy('title', 'ASC');
    $result = $query->execute();

    $liste_forum_html = "";
    if(isset($result['node'])){
      foreach($result['node'] as $nid => $info){
        $forum = node_load($nid);
        if(node_access("view", $forum)){
          $lien = url('dashboard/' . $nid_groupe . '/forum/' . $nid, array('absolute' => TRUE));
          $liste_forum_html .= '<li><a href="' . $lien . '">' . $forum->title . '</a></li>';
        }
      }
    }


      $lien = url('dashboard/' . $nid_groupe . '/new/forum',
          array('absolute' => TRUE,
              'query' => array(
                            'og_group_ref' => $nid_groupe,
                            'field_noeud_parent_sitemap' => $nid_groupe,
                            'destination' => current_path()
                         )
              )
      );

      if(sitemap_access('create forum content', "node", $nid_groupe)){
        $liste_forum_html .= '<li><a href="' . $lien . '"><i class="fa fa-edit"></i>' . 'créer un forum' . '</a></li>';
      }

      $liste_forum_html = '<ul class="nav child_menu">' . $liste_forum_html . '</ul>';
      $liste_forum_html = '<li><a><i class="fa fa-edit"></i> Les forums <span class="fa fa-chevron-down"></span></a>' . $liste_forum_html . '</li>';


    if(isset($user2->field_image_du_compte['und'])){
      $image_url = file_create_url($user2->field_image_du_compte['und'][0]['uri']);
    }else{
      $image_url = "";
    }


    $output .= '<div class="left_col scroll-view">
              <div class="navbar nav_title" style="border: 0;">';
                if(!empty($lien_retour)){
                  $output .= '<a href="' . $lien_retour[0]['url'] . '" class="site_title"><i class="fa fa-paw"></i> <span>' . $lien_retour[0]['title'] . '</span></a>';
                }else{
                  $output .= '<a href="index.html" class="site_title"><i class="fa fa-paw"></i> <span>Le Petit Peuple</span></a>';
                }
              $output .= '
              </div>

              <div class="clearfix"></div>

              <!-- menu profile quick info -->
              <div class="profile clearfix">' .

                '<div class="profile_pic"><img src="' .
                   $image_url  . '"
                    class="img-circle profile_img"/>' .
                 '</div>' .

                '<div class="profile_info">
                  <span>Bienvenue,</span>
                  <h2>' . $user2->name . '</h2>' .
                '</div>
              </div>
              <!-- /menu profile quick info -->

              <br />

              <!-- sidebar menu -->
              <div id="sidebar-menu" class="main_menu_side hidden-print main_menu">
                <div class="menu_section">
                  <h3>General</h3>
                  <ul class="nav side-menu">
                    <li><a><i class="fa fa-home"></i> Home <span class="fa fa-chevron-down"></span></a>
                      <ul class="nav child_menu">
                        <li><a href="">Dashboard</a></li>
                        <li><a href="index2.html">Dashboard2</a></li>
                        <li><a href="index3.html">Dashboard3</a></li>
                      </ul>
                    </li>
                    ' . $liste_email_html . $liste_forum_html . $liste_depot_html . $liste_depot_tel_html . '
                  </ul>
                </div>
                <div class="menu_section">
                  <h3>Administration du groupe</h3>

                  <ul class="nav side-menu">
                    ' . getelella_interface_retourner_menu_opp_og($nid_groupe) . '
                    <li><a><i class="fa fa-sitemap"></i> Multilevel Menu <span class="fa fa-chevron-down"></span></a>
                      <ul class="nav child_menu">
                          <li><a href="#level1_1">Level One</a>
                          <li><a>Level One<span class="fa fa-chevron-down"></span></a>
                            <ul class="nav child_menu">
                              <li class="sub_menu"><a href="level2.html">Level Two</a>
                              </li>
                              <li><a href="#level2_1">Level Two</a>
                              </li>
                              <li><a href="#level2_2">Level Two</a>
                              </li>
                            </ul>
                          </li>
                          <li><a href="#level1_2">Level One</a>
                          </li>
                      </ul>
                    </li>
                  </ul>
                </div>

              </div>
              <!-- /sidebar menu -->

              <!-- /menu footer buttons -->
              <div class="sidebar-footer hidden-small">
                <a data-toggle="tooltip" data-placement="top" title="Settings">
                  <span class="glyphicon glyphicon-cog" aria-hidden="true"></span>
                </a>
                <a data-toggle="tooltip" data-placement="top" title="FullScreen">
                  <span class="glyphicon glyphicon-fullscreen" aria-hidden="true"></span>
                </a>
                <a data-toggle="tooltip" data-placement="top" title="Lock">
                  <span class="glyphicon glyphicon-eye-close" aria-hidden="true"></span>
                </a>
                <a data-toggle="tooltip" data-placement="top" title="Logout" href="login.html">
                  <span class="glyphicon glyphicon-off" aria-hidden="true"></span>
                </a>
              </div>
              <!-- /menu footer buttons -->
            </div>';
  }
  return $output;
}

function getelella_interface_new_feed($form, &$form_state, $nid){

  ctools_include('export');
  ctools_include('export-ui');
  $plugin = ctools_get_export_ui("mailhandler");
  $handler = ctools_export_ui_get_handler($plugin);
  $method = 'add_page';


  $item = ctools_export_crud_new($handler->plugin['schema']);

  $args = array(false, $_POST, null);

  $form_state = array(
    'plugin' => $handler->plugin,
    'object' => &$handler,
    'ajax' => false,
    'item' => $item,
    'op' => 'add',
    'form type' => 'add',
    'rerender' => TRUE,
    'no_redirect' => TRUE,
    'step' => null,
    // Store these in case additional args are needed.
    'function args' => $args,
  );

  $form_state += form_state_defaults();
  $form_state['input'] = $form_state['method'] == 'get' ? $_GET : $_POST;
  $form_id = 'ctools_export_ui_edit_item_form';

  $check_cache = isset($form_state['input']['form_id']) && $form_state['input']['form_id'] == $form_id && !empty($form_state['input']['form_build_id']);

  if ($check_cache) {
      $form_state_before_retrieval = $form_state;
    }




  //$form = drupal_retrieve_form('ctools_export_ui_edit_item_form', $form_state);
  $form = drupal_retrieve_form($form_id, $form_state);
  //$handler->edit_form($form, $form_state);
  drupal_prepare_form($form_id, $form, $form_state);
  drupal_process_form($form_id, $form, $form_state);
  $form['#submit'] = array('getelella_interface_new_feed_submit');
  return $form;
}
function getelella_interface_new_feed_submit($form, &$form_state){
  $r = 0;
  $form_state['object']->edit_form_submit($form, $form_state);
  $form_state['object']->edit_save_form($form_state);
}


function getelella_interface_get_ajax($nid) {
  $node = node_load($nid);
  return node_view($node, 'full');
}

function getelella_interface_callback($page_callback_result) {
  // Only render content and validates return
  $content = is_string($page_callback_result) ? $page_callback_result :   drupal_render($page_callback_result);
  $html = '' . drupal_get_css() . drupal_get_js() . '' . $content . '';
  $html = $content;
  print $html;
  drupal_page_footer();
}

function getelella_interface_callback_no_js_css($page_callback_result) {
  // Only render content and validates return
  $content = is_string($page_callback_result) ? $page_callback_result :   drupal_render($page_callback_result);
  $html = $content;
  print $html;
  drupal_page_footer();
}

/**
 * Always use stark on that menu route.
 */
function getelella_interface_gentelella_callback() {
  return 'gentelella';
}

function getelella_interface_iframe_callback(){
  return 'iframe';
}

function getelella_interface_messageindex($nid_boite = false, $provenance = 0, $baliser_classe = true, $recharger = 0){
  if($nid_boite){
    if($recharger){
      $myFeed = feeds_source("importeur_de_email_" . $nid_boite);
      while (FEEDS_BATCH_COMPLETE != $myFeed->import());
    }
    $retour = "";
    if($provenance < 3){
      $retour .= views_embed_view('liste_des_emails', 'block_1', $nid_boite, $provenance);
    }else if($provenance == 3){
      $retour .= views_embed_view('liste_des_emails', 'block_1', $nid_boite, 1, 1);
    }
    if($baliser_classe){
      $retour = "<div class=\"content-mail-list\">" . $retour . "</div";
    }
    return $retour;
  }else{
    return "";
  }
}

/**
  * Implements hook_ctools_plugin_directory().
  */
function getelella_interface_ctools_plugin_directory($module, $plugin) {
  if (($module == 'ctools' || $module == 'panels') && !empty($plugin)) {
    return 'plugins/content_types';
  }
}

function getelella_interface_cronapi() {
  $items = array();
  $items['getelella_interface_envoyer_email_prets'] = array();
  return $items;
}

/**
 * The callback for the cron job,
 */
function getelella_interface_envoyer_email_prets($job) {
  $query = new EntityFieldQuery();
  $email_plus_tard = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'email')
    ->fieldCondition('field_envoyer_plus_tard', 'value', 1)
    ->fieldCondition('field_date_d_envois', 'value', time(), '<=')
    ->execute();

  if(isset($email_plus_tard['node'])){
    foreach($email_plus_tard['node'] as $cle => $email){
      if(gentelella_interface_si_mail_est_a_envoyer($email->nid)){
        gentelella_interface_envoyer_email($email->nid);
      }
    }
  }
}



function gentelella_interface_si_mail_est_a_envoyer($mail_id){
  if(($node = node_load($mail_id))
      && ($emw_node = entity_metadata_wrapper('node', $node))
  ){
    return (
        (
          $emw_node->field_envoyer_plus_tard->value()
          && $emw_node->field_date_d_envois->value() < time()
        ) || (
          !$emw_node->field_email_date->value()
          && !$emw_node->field_envoyer_plus_tard->value()
        )
    );
  }else{
    return false;
  }
}

function gentelella_interface_envoyer_email($mail_id){
  if(($node = node_load($mail_id))
      && ($emw_node = entity_metadata_wrapper('node', $node))
  ){
    $destinateur = $emw_node->field_email_from_address->value();
    $destinataire =  $emw_node->field_email_to_address->value();

    $params['subject'] =	$emw_node->title->value();
    $params['body'] =	$emw_node->body->value()['value'];
    $params['Reply-To'] =	$emw_node->field_email_reply_to_address->value(); //"info@test123.org";
    $params['headers']['From'] = $destinateur;
    $params['headers']['Sender'] = $destinateur;
    $params['headers']['Return-Path'] = $destinateur;
    $params['headers']['Reply-To'] = $destinateur;

    foreach($emw_node->field_attachements->value() as $cle => $ligne_fichier){
      if($file = file_load($ligne_fichier['fid'])){
        $params['attachments'][] = drupal_realpath($file->uri);
      }
    }

    $success = false;
    if (module_exists('sendgrid_integration')) {
      mailsystem_set(array('sendgrid_integration' => "HTMLMailSystem__SendGridMailSystem"));
      $success = drupal_mail('sendgrid_integration', 'test', $destinataire, language_default(), $params, $destinateur);
    }else{
      mailsystem_clear(array('sendgrid_integration' => "HTMLMailSystem__SendGridMailSystem"));
      mailsystem_set(array('getelella_interface' => "HTMLMailSystem"));
      $success = drupal_mail('getelella_interface', 'test_mail_gentelella', $destinataire, language_default(), $params, $destinateur);
    }

    if($success){
      drupal_set_message("succès, email envoyé!");
      $emw_node->field_email_date->set(time());
      $emw_node->field_envoyer_plus_tard->set(0);
      $emw_node->save();
    }else{
      drupal_set_message("Échec de l'envois du email");
    }
  }
}

/*
function getelella_interface_cron() {
  $sendto = "test123@gmail.com";
  $from = "test123@test123.org";
  $params = array();
  $params['subject'] =	"test cron";
  $params['body'] =	"ceci est un test cron";
  $params['Reply-To'] =	$from;
  $params['include_test_attachment'] = 0;
  //$params['headers']['MIME-Version'] =	"1.0";
  $params['headers']['From'] = $from;
  $params['headers']['Sender'] = $from;
  $params['headers']['Return-Path'] = $from;
  $params['headers']['Reply-To'] = $from;
  if (module_exists('sendgrid_integration')) {
    mailsystem_set(array('sendgrid_integration' => "HTMLMailSystem__SendGridMailSystem"));
    $success = drupal_mail('sendgrid_integration', 'test', $sendto, language_default(), $params, $from);
  }else{
    $success = drupal_mail('getelella_interface', 'any_key', $sendto, language_default(), $params, $from);
  }

  if($success){
    $message = 'Succès "!term" envoies de email';
  }else{
    $message = 'échec "!term" envoies de email';
  }

  $replacements = array('!term' => "test");

  watchdog('mail_test_cron', $message, $replacements, WATCHDOG_ERROR);
}*/

/*
 * à chaques fois qu'on publie un message on recharge la liste. le rechargement complet lorsqu'on clique sur un nouveau sujet
 * le rechargement partiel lorsqu'on publie un message ou lors de l'interval de recharge auto
 * après chaque chargement on ajuste la variable globale temps dernier message soit: après nouveau message, recharge auto et etc...
 */